{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "9b7ada51-21e7-4324-add8-38ceeaa120c1",
   "metadata": {},
   "outputs": [],
   "source": [
    "#Load & Preprocess Data\n",
    "import pandas as pd\n",
    "import numpy as np\n",
    "from sklearn.model_selection import train_test_split\n",
    "from sklearn.preprocessing import StandardScaler, LabelEncoder\n",
    "\n",
    "# Load Clinical Data\n",
    "df_clinical = pd.read_csv(\"C:/Users/sriks/OneDrive/Desktop/project/parkinsons_disease_data.csv\")\n",
    "\n",
    "# Drop unnecessary columns\n",
    "df_clinical = df_clinical.drop(columns=[\"PatientID\", \"DoctorInCharge\"])\n",
    "\n",
    "# Encode categorical variables\n",
    "categorical_cols = [\"Gender\", \"Ethnicity\", \"EducationLevel\", \"Smoking\", \"FamilyHistoryParkinsons\",\n",
    "                    \"TraumaticBrainInjury\", \"Hypertension\", \"Diabetes\", \"Depression\", \"Stroke\",\n",
    "                    \"Tremor\", \"Rigidity\", \"Bradykinesia\", \"PosturalInstability\", \"SpeechProblems\",\n",
    "                    \"SleepDisorders\", \"Constipation\"]\n",
    "\n",
    "for col in categorical_cols:\n",
    "    le = LabelEncoder()\n",
    "    df_clinical[col] = le.fit_transform(df_clinical[col])\n",
    "\n",
    "# Normalize numerical columns\n",
    "numerical_cols = df_clinical.select_dtypes(include=[\"float64\", \"int64\"]).columns.drop(\"Diagnosis\")\n",
    "scaler = StandardScaler()\n",
    "df_clinical[numerical_cols] = scaler.fit_transform(df_clinical[numerical_cols])\n",
    "\n",
    "# Load Voice Data\n",
    "df_voice = pd.read_csv(\"C:/Users/sriks/OneDrive/Desktop/project/parkinsons.data.csv\").drop(columns=[\"name\"])\n",
    "\n",
    "# Normalize numerical features in voice dataset\n",
    "scaler_voice = StandardScaler()\n",
    "voice_features = df_voice.drop(columns=[\"status\"])\n",
    "df_voice[voice_features.columns] = scaler_voice.fit_transform(voice_features)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "6827a930-f32b-44ec-85b8-dc2bf521db7e",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Clinical Model Accuracy: 89.55%\n",
      "Voice Model Accuracy: 94.87%\n"
     ]
    }
   ],
   "source": [
    "from sklearn.ensemble import RandomForestClassifier\n",
    "from sklearn.metrics import accuracy_score\n",
    "import pickle\n",
    "\n",
    "# Split Data\n",
    "X_clinical, y_clinical = df_clinical.drop(columns=[\"Diagnosis\"]), df_clinical[\"Diagnosis\"]\n",
    "X_voice, y_voice = df_voice.drop(columns=[\"status\"]), df_voice[\"status\"]\n",
    "\n",
    "X_train_c, X_test_c, y_train_c, y_test_c = train_test_split(X_clinical, y_clinical, test_size=0.2, random_state=42)\n",
    "X_train_v, X_test_v, y_train_v, y_test_v = train_test_split(X_voice, y_voice, test_size=0.2, random_state=42)\n",
    "\n",
    "# Train Models\n",
    "model_clinical = RandomForestClassifier(n_estimators=100, random_state=42)\n",
    "model_clinical.fit(X_train_c, y_train_c)\n",
    "\n",
    "model_voice = RandomForestClassifier(n_estimators=100, random_state=42)\n",
    "model_voice.fit(X_train_v, y_train_v)\n",
    "\n",
    "# Evaluate Accuracy\n",
    "accuracy_clinical = accuracy_score(y_test_c, model_clinical.predict(X_test_c))\n",
    "accuracy_voice = accuracy_score(y_test_v, model_voice.predict(X_test_v))\n",
    "\n",
    "print(f\"Clinical Model Accuracy: {accuracy_clinical * 100:.2f}%\")\n",
    "print(f\"Voice Model Accuracy: {accuracy_voice * 100:.2f}%\")\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "e06b9208-5881-4950-950d-00ba0280d461",
   "metadata": {},
   "outputs": [],
   "source": [
    "# Save trained models\n",
    "pickle.dump(model_clinical, open(\"parkinsons_clinical_model.pkl\", \"wb\"))\n",
    "pickle.dump(model_voice, open(\"parkinsons_voice_model.pkl\", \"wb\"))\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": None,
   "id": "a5b098e6-8f9b-446e-a61d-8c59f526e0d1",
   "metadata": {},
   "outputs": [],
   "source": [
    "import streamlit as st\n",
    "import pickle\n",
    "import numpy as np\n",
    "\n",
    "# Load trained models\n",
    "def load_model(filename):\n",
    "    try:\n",
    "        return pickle.load(open(filename, \"rb\"))\n",
    "    except FileNotFoundError:\n",
    "        st.error(f\"Error: The model file '{filename}' is missing. Ensure it exists in the directory.\")\n",
    "        return None\n",
    "\n",
    "model_clinical = load_model(\"parkinsons_clinical_model.pkl\")\n",
    "model_voice = load_model(\"parkinsons_voice_model.pkl\")\n",
    "\n",
    "# Streamlit UI Setup\n",
    "st.set_page_config(page_title=\"Parkinson's Disease Detector\", layout=\"wide\")\n",
    "st.title(\"Parkinson's Disease Prediction\")\n",
    "st.write(\"Enter the required details to check for Parkinsonâ€™s Disease.\")\n",
    "\n",
    "if model_clinical is None or model_voice is None:\n",
    "    st.error(\"Error: One or both model files are missing. Ensure they exist.\")\n",
    "else:\n",
    "    # Clinical Data Inputs\n",
    "    st.header(\"Clinical Data\")\n",
    "    age = st.slider(\"Age\", 30, 90, 60)\n",
    "    bmi = st.number_input(\"BMI\", min_value=10.0, max_value=40.0, step=0.1)\n",
    "    sleep_quality = st.slider(\"Sleep Quality\", 0.0, 10.0, 5.0)\n",
    "    tremor = st.selectbox(\"Tremor\", [0, 1])\n",
    "    rigidity = st.selectbox(\"Rigidity\", [0, 1])\n",
    "    bradykinesia = st.selectbox(\"Bradykinesia\", [0, 1])\n",
    "    postural_instability = st.selectbox(\"Postural Instability\", [0, 1])\n",
    "\n",
    "    # Voice Data Inputs\n",
    "    st.header(\"Voice Data\")\n",
    "    jitter = st.slider(\"Jitter (%)\", 0.0, 1.0, step=0.01)\n",
    "    shimmer = st.slider(\"Shimmer (%)\", 0.0, 1.0, step=0.01)\n",
    "    hnr = st.slider(\"Harmonics-to-Noise Ratio (HNR)\", 0.0, 40.0, step=0.1)\n",
    "\n",
    "    if st.button(\"Predict\"):\n",
    "        # Prepare input features\n",
    "        clinical_features = np.array([[age, bmi, sleep_quality, tremor, rigidity, bradykinesia, postural_instability]])\n",
    "        voice_features = np.array([[jitter, shimmer, hnr]])\n",
    "        \n",
    "        # Get Predictions\n",
    "        clinical_pred = model_clinical.predict(clinical_features)[0]\n",
    "        voice_pred = model_voice.predict(voice_features)[0]\n",
    "        \n",
    "        # Final Diagnosis\n",
    "        if clinical_pred == 1 or voice_pred == 1:\n",
    "            diagnosis = \"Parkinson's Detected\"\n",
    "        else:\n",
    "            diagnosis = \"No Parkinson's Detected\"\n",
    "        \n",
    "        st.success(f\"Prediction: {diagnosis}\")\n",
    "\n",
    "# Footer\n",
    "st.markdown(\"Developed with love using Streamlit\")\n"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python [conda env:base] *",
   "language": "python",
   "name": "conda-base-py"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.12.7"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
